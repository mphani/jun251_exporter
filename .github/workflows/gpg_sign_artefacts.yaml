name: GPG sign rpm
on: 
  workflow_dispatch:
     inputs:
        release_tag_info:
          description: enter release tag number
          default: v2.0.0
          required: true
permissions:
  id-token: write
  actions: write
  contents: write
  
jobs:
  signing:
    #runs-on: ubuntu-latest
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@master
      - name: Update libraries
        run: sudo apt-get update && sudo apt-get install dpkg-sig dpkg-dev -y
      - name: Download DEB & RPM from Release “${{ github.event.inputs.tag }}”
        env:
          GH_TOKEN: ${{ github.token }}      
        run: |
          mkdir artefacts
          gh release download ${{ github.event.inputs.release_tag_info }} \
            --pattern '*.rpm' \
            --pattern '*.deb' \
            --dir artefacts    
          echo
          echo listing downloaded artefacts
          echo
          ls -lrt artefacts/*
      - name: Setup GPG
        uses: aerospike/shared-workflows/devops/setup-gpg@feat/setup-gpg-composite
        with:
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg-key-pass: ${{ secrets.GPG_PASS }}
          gpg-public-key: ${{ secrets.GPG_PUBLIC_KEY }}
          gpg-key-name: "phani"
      - name: Sign RPM Package
        env:
          GPG_TTY: no-tty
          GPG_PUBLIC_KEY: ${{ secrets.GPG_PUBLIC_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASS }}
          GH_TOKEN: ${{ github.token }}      
          HOME: /home/runner
          GNUPGHOME: /home/runner/.gnupg
        run: |
          # Ensure environment variables are exported
          export HOME="${HOME}"
          export GNUPGHOME="${GNUPGHOME}"

          # Create symlink for gpg2 (required for rpm signing)
          echo Creating soft-link: sudo ln -sf $(which gpg) /usr/bin/gpg2   
          sudo ln -sf $(which gpg) /usr/bin/gpg2 

          echo -e "$GPG_PASSPHRASE" > "$GNUPGHOME/passphrase"
          echo -e "$GPG_PUBLIC_KEY" > "$GNUPGHOME/public.key"
          echo "$GNUPGHOME/public.key"          
          ls -lrt "$GNUPGHOME/public.key"

          cd artefacts

          files=$(find . -type f \( -name "aerospike-prome*.rpm" -o -name "*.deb" \) -printf "$(realpath -s %p) ")            
          for file in $files; do
               # file=$(basename "$filename")
               echo "gpg generate sha256sum -- $file"
               sha256sum $file > $file.sha256
               gpg --armour --digest-algo sha256 --detach-sign --no-tty --batch --yes --passphrase "$GPG_PASSPHRASE" $file.sha256
          done            

          # to check signature, public key needs to be imported into rpm
          rpm --import "$GNUPGHOME/public.key"
          
          # Sign using gpg
          echo Adding signature to rpm artefacts
          rpm --addsign artefacts/*.rpm
          
          echo Checking signature to rpm artefacts
          rpm --checksig artefacts/*.rpm

          echo Signing deb files
          dpkg-sig --sign builder --gpg-options "--batch --pinentry-mode loopback --passphrase-file $GNUPGHOME/passphrase" artefacts/*.deb

          echo Verifying deb file signature
          dpkg-sig --verify artefacts/*.deb

      - name: Upload files to release-tag
        env:
          GH_TOKEN: ${{ github.token }}              
        run: |
          TAG_NAME=${{ github.event.inputs.release_tag_info }}   

           # List asset names, filter for .sha256 or .asc, then delete each
          for file in $(gh release view "$TAG_NAME" --json assets --jq '.assets[].name' \
                            | grep -E '\.rpm$|\.deb$|\.sha256$|\.asc$'); do
            echo "removing file $file"
            gh release delete-asset "$TAG_NAME" "$file" -y
          done

          files=$(find ./artefacts -type f -name "aerospike-prome*" -printf "$(realpath -s %p) ")
          for file in $files; do
             echo "uploading file $file"
             gh release upload "$TAG_NAME" "$file"             
          done 
