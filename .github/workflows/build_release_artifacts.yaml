# This workflow will build a golang project
# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Build exporter deb,rpm and tgz artifacts

on:
  push:
    tags:
      - v*

permissions:
  id-token: write
  actions: write
  contents: write

jobs:
  build:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        include:
          - arch: amd64
            make_target: package-linux-amd64
            goarch: amd64
            tar_arch: x86_64
          - arch: arm64
            make_target: package-linux-arm64
            goarch: arm64
            tar_arch: aarch64

    steps:

      - name: Install dpkg-sig
        run: sudo apt-get update && sudo apt-get install dpkg-sig dpkg-dev -y  
        
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get latest tag
        uses: actions-ecosystem/action-get-latest-tag@v1
        id: get-latest-tag

      - name: Set up Snyk CLI
        uses: snyk/actions/setup@master

      - name: Authenticate Snyk
        run: snyk auth ${{ secrets.SNYK_TOKEN }}

      - name: Install FPM deps
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby ruby-dev build-essential rpm

      - name: Install FPM
        run: |
          sudo gem install --no-document fpm
          fpm --version

      - name: Build deb/rpm for ${{ matrix.arch }}
        run: make ${{ matrix.make_target }}

      - name: Build tar for ${{ matrix.arch }}
        run: make tar GOOS=linux GOARCH=${{ matrix.goarch }} ARCH=${{ matrix.tar_arch }}

      - name: Gzip tar to .tgz
        run: |
          cd pkg/target
          gzip aerospike-prometheus-exporter*.tar
          for f in *.tar.gz; do
            echo "Renaming $f"
            mv "$f" "${f%.tar.gz}.tgz"
          done

      - name: Setup GPG
        uses: aerospike/shared-workflows/.github/actions/setup-gpg@dda8173aca1f1e73f95267572a7d3849cd00f1b8  # v1.0.0
        with:
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg-public-key: ${{ secrets.GPG_PUBLIC_KEY }}
          gpg-key-pass: ${{ secrets.GPG_PASS }}

      - name: Sign RPM, DEB and TGZ packages
        env: 
          GPG_TTY: no-tty
          HOME: /home/runner
          GNUPGHOME: /home/runner/.gnupg
        run: |
          echo "Sign RPM, DEB and TGZ packages"
          cd pkg/target
          
          for deb in $(find . -name "*.deb"); do
             echo "Signing deb $deb"
            
             # Sign the package
             dpkg-sig --sign builder --gpg-options "--batch --pinentry-mode loopback --passphrase-file $GNUPGHOME/passphrase" "$deb"
            
             # Verify the signature
             dpkg-sig --verify "$deb"
            
             # External gpg sign and checksum
             gpg --batch --yes --detach-sign --armor --passphrase "${{ secrets.GPG_PASS }}" --local-user aerospike-inc --output "$deb.asc" "$deb"
             shasum -a 256 "$deb" > "$deb.sha256"            
          done

          for rpm in $(find . -name "*.rpm"); do
             echo "Signing rpm $rpm"
 
             # Sign the package
             rpm --addsign "$rpm"
             
             # Verify the signature
             rpm --checksig "$rpm"

             # External gpg sign and checksum
             gpg --batch --no-tty --yes --detach-sign --armor --passphrase "${{ secrets.GPG_PASS }}" --local-user aerospike-inc --output "$rpm.asc" "$rpm"             
             shasum -a 256 "$rpm" > "$rpm.sha256"
             # shasum -a 256 "$rpm.asc" > "$rpm.asc.sha256"
          done
          
      - name: Upload all artifacts
        env:
          GH_TOKEN: ${{ github.token }}
          TAG_NAME: ${{ steps.get-latest-tag.outputs.tag }}
        run: |
          files=$(find pkg/target -type f -name "aerospike-prome*" -printf "%p ")
          for file in $files; do
            echo "Uploading $file to release $TAG_NAME"
            gh release upload "$TAG_NAME" "$file"
          done
          
